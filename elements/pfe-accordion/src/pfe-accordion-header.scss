@import "shared-assets";

/// ===========================================================================
/// ACCORDION HEADER
/// ===========================================================================
:host {
  @include pfe-hidden;
  
  transition: transform 0.3s pfe-var(animation-timing);
  display: block;

  // Shadow template styles
  > * {
    margin: 0;
  }

  button {
    @include pfe-trigger;

    // @TODO workaround, can we get the variables working?
    @include browser-query(edge) {
      text-align: left;
    }

    @include browser-query(ie11) {
      padding: 16px 24px;
      &:hover {
        border-left-color: pfe-fetch(ui-accent);
      }
    }

    &[aria-expanded="true"] {
      $accordion: pfe-accordion-variables($state: expanded);
      @include pfe-print-local($accordion);
      @include browser-query(ie11) {
        border-bottom-width: 0;
        border-left-color: pfe-fetch(ui-accent);
        border-right-color: pfe-fetch(surface--border);
      }
    }
  }
}

:host(:not([disclosure="true"])) {
  button::after {
    @include pfe-chevron($state: closed);
  }
  button[aria-expanded="true"]::after {
    transform: rotate(-135deg);
  }
}

// Add border bottom to the last button in an accordion set.
:host(:last-of-type) button:not([aria-expanded="true"]) {
  @include pfe-trigger-last;
}

:host(:last-of-type.animating) button {
  --pfe-accordion--BorderBottomWidth: 0;
}

// Styles based on background color
button[aria-expanded="true"] {
  :host([on="dark"]) & {
    $accordion: pfe-accordion-variables($state: expanded, $context: dark);
    @include pfe-print-local($accordion);
  }

  :host([on="saturated"]) & {
    $accordion: pfe-accordion-variables($state: expanded, $context: saturated);
    @include pfe-print-local($accordion);
  }
}

/// ===========================================================================
/// DISCLOSURE STYLES
/// ===========================================================================

:host([disclosure="true"]) {
  button {
    padding-left: calc(#{pfe-local(Padding, $region: base)} * 3);
    @include browser-query(ie11) {
      padding: 16px 24px 16px 47px;
      border-right-color: pfe-fetch(surface--border);
      border-left-color: pfe-fetch(surface--border);
      border-left-width: pfe-fetch(surface--border-width);
    }

    &::before {
      @include pfe-chevron($state: closed, $position: before, $offset: .55em);
    }
    
    &[aria-expanded="true"]::before {
      transform: rotate(45deg);
    }
    
    &[aria-expanded="true"],
    &:not([aria-expanded="true"]):hover {
      padding-left: calc(#{pfe-local(Padding, $region: base)} * 3 - #{pfe-var(surface--border-width--heavy)} + #{pfe-var(surface--border-width)});
      &::before {
        margin-left: calc((#{pfe-var(surface--border-width--heavy)} - #{pfe-var(surface--border-width)}) * -1);
      }
    }
  }
}
