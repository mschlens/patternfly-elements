@import "../../pfe-sass/pfe-sass";
@include pfe-contexts;

$LOCAL: icon;
$LOCAL-VARIABLES: (
  context: light,
  size: pfe-var(icon-size),
  spacing: pfe-var(container-spacer),
  color: transparent,
  Padding: 0,
  BackgroundColor: transparent,
  BorderWidth: 0,
);

// Nested internal variables (pfe-local calls), maps cannot "self-reference"
$LOCAL-VARIABLES: map-deep-merge($LOCAL-VARIABLES, (
  Color: pfe-local(color, $fallback: pfe-broadcasted(text)),
  BorderColor: pfe-local(color),
));

/// ===========================================================================
/// Component Specific SASS Vars
/// ===========================================================================

@mixin greyscale-fallback() {
  background-color: white !important;

  & svg filter feFlood {
      flood-color: black !important;
  }
}

:host {
  --context: #{pfe-local(context)};  

  position: relative;
  display:  inline-block;

  // Supports sizing while preserving aspect ratio (despite layout)
  max-width:   calc(#{pfe-local(size)} + #{pfe-local(Padding)} * 2);
  width:       fit-content !important;
  max-height:  calc(#{pfe-local(size)} + #{pfe-local(Padding)} * 2);
  height:      fit-content !important;
  line-height: 0;

  @at-root #{&}([block]) {
    display: block;
    margin-bottom: pfe-local(spacing);
    margin-top:    pfe-local(spacing);

    &:first-child {
      margin-top: 0;
    }
  }

  svg {
    width:  pfe-local(size);
    height: pfe-local(size);
  }
}

:host(:not(.load-failed)) {
  vertical-align: middle;
  border-radius: 50%;
  background-color: pfe-local(BackgroundColor);
  border: pfe-local(BorderWidth) pfe-var(ui--border-style) pfe-local(BorderColor);
  padding: pfe-local(Padding);

  @include browser-query(ie11) {
      @include greyscale-fallback();
  }


  // Edge 12+ CSS
  @include browser-query(edge12) {
      @include greyscale-fallback();
  }

  svg image {
    @include browser-query(ie11) {
      filter: none;
    }
  }

  filter feFlood {
    flood-color: pfe-local(Color);
  }

  .pfe-icon--fallback {
    display: none;
  }
}

@for $num from 2 through 4 {
  :host([size="#{$num}x"]) {
    --pfe-icon--size: #{$num}em;
  }
}

$sizing: (
  xl: 100px,
  lg: 64px,
  md: 32px,
  sm: 14px
);

// @TODO: Sort out sizing
@each $label, $size in $sizing {
  :host([size="#{$label}"]) {
    --pfe-icon--size: #{$size};
  }
}

@each $level in (critical, important, moderate, success, info, default) {
  :host([color="#{$level}"]) {
    --pfe-icon--color: #{pfe-var(feedback--#{$level})};
    @if $level != "moderate" {
      --pfe-icon--context: dark;
    }
  }
}

@each $color in (lightest, base, darker, darkest, complement, accent) {
  :host([color="#{$color}"]) {
    --pfe-icon--color: #{pfe-var(surface--#{$color})};
    --pfe-icon--context: #{pfe-var(surface--#{$color}--context)};
  }
}

// May need Feedback Darkest colors too.

:host([circled]:not([circled="false"])) {
    --pfe-icon--BackgroundColor: #{pfe-local(color, $fallback: pfe-var(surface--lightest))};
    --pfe-icon--Color:           #{pfe-broadcasted(text)};
    --pfe-icon--Padding:         .5em;
    --pfe-icon--BorderWidth:     #{pfe-var(ui--border-width)};
    --pfe-icon--BorderColor:     #{pfe-local(color, $fallback: pfe-var(surface--border))};
}

:host(.load-failed) svg image {
  display: none;
}

:host(.load-failed.has-fallback) svg,
:host(.load-failed[on-fail="collapse"]) svg {
  display: none;
}

:host(.load-failed[on-fail="collapse"]) {
  --pfe-icon--size: 0;
}
